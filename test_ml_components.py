"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ Airflow DAG'—ñ–≤
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
import joblib
import os
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_data_loading():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
    try:
        csv_path = 'starbucks.csv'
        df = pd.read_csv(csv_path)
        logger.info(f"‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(df)} —Ä—è–¥–∫—ñ–≤, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        logger.info(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        return df
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
        return None

def test_feature_preparation(df):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–∑–Ω–∞–∫"""
    try:
        df_clean = df.dropna()
        
        def categorize_caffeine(caffeine):
            if caffeine == 0:
                return 'decaf'
            elif caffeine <= 50:
                return 'low'
            elif caffeine <= 150:
                return 'medium'
            elif caffeine <= 300:
                return 'high'
            else:
                return 'very_high'
        
        df_clean['caffeine_category'] = df_clean['caffeine_mg'].apply(categorize_caffeine)
        
        le_size = LabelEncoder()
        df_clean['size_encoded'] = le_size.fit_transform(df_clean['size'])
        
        logger.info(f"‚úÖ –û–∑–Ω–∞–∫–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {len(df_clean)} —Ä—è–¥–∫—ñ–≤ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è")
        logger.info(f"–†–æ–∑–ø–æ–¥—ñ–ª –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∫–æ—Ñ–µ—ó–Ω—É: {df_clean['caffeine_category'].value_counts().to_dict()}")
        
        return df_clean, le_size
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–∑–Ω–∞–∫: {e}")
        return None, None

def test_regression_model(df):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–≥—Ä–µ—Å—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ"""
    try:
        feature_columns = ['size_encoded', 'milk', 'whip', 'serv_size_m_l', 
                          'total_fat_g', 'sugar_g', 'caffeine_mg']
        target_column = 'calories'
        
        X = df[feature_columns]
        y = df[target_column]
        
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )
        
        model = RandomForestRegressor(n_estimators=50, random_state=42)
        model.fit(X_train, y_train)
        
        y_pred = model.predict(X_test)
        r2 = r2_score(y_test, y_pred)
        mse = mean_squared_error(y_test, y_pred)
        
        logger.info(f"‚úÖ –†–µ–≥—Ä–µ—Å—ñ–π–Ω–∞ –º–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞:")
        logger.info(f"   R¬≤ Score: {r2:.3f}")
        logger.info(f"   MSE: {mse:.2f}")
        logger.info(f"   RMSE: {np.sqrt(mse):.2f}")
        
        return model, r2
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è —Ä–µ–≥—Ä–µ—Å—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ: {e}")
        return None, None

def test_classification_model(df):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ"""
    try:
        feature_columns = ['size_encoded', 'milk', 'whip', 'serv_size_m_l', 
                          'calories', 'total_fat_g', 'sugar_g']
        target_column = 'caffeine_category'
        
        X = df[feature_columns]
        y = df[target_column]
        
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42, stratify=y
        )
        
        model = RandomForestClassifier(n_estimators=50, random_state=42)
        model.fit(X_train, y_train)
        
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        
        logger.info(f"‚úÖ –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∞ –º–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞:")
        logger.info(f"   Accuracy: {accuracy:.3f}")
        
        unique, counts = np.unique(y_pred, return_counts=True)
        pred_distribution = dict(zip(unique, counts))
        logger.info(f"   –†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤: {pred_distribution}")
        
        return model, accuracy
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ: {e}")
        return None, None

def test_model_saving_loading():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π"""
    try:
        X = np.random.rand(100, 3)
        y = np.random.rand(100)
        
        model = RandomForestRegressor(n_estimators=10, random_state=42)
        model.fit(X, y)
        
        test_model_path = 'test_model.joblib'
        joblib.dump(model, test_model_path)
        
        loaded_model = joblib.load(test_model_path)
        
        pred1 = model.predict(X[:5])
        pred2 = loaded_model.predict(X[:5])
        
        if np.allclose(pred1, pred2):
            logger.info("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.error("‚ùå –†—ñ–∑–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ")
        
        os.remove(test_model_path)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def test_xcom_simulation():
    """–°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ XCom"""
    try:
        task1_output = {
            'model_id': 'test_regression_rf_20250609_120000',
            'model_path': '/tmp/test_model.joblib',
            'r2_score': 0.85,
            'feature_columns': ['size_encoded', 'milk', 'whip']
        }
        
        received_model_id = task1_output['model_id']
        received_score = task1_output['r2_score']
        
        logger.info("‚úÖ XCom —Å–∏–º—É–ª—è—Ü—ñ—è:")
        logger.info(f"   –ü–µ—Ä–µ–¥–∞–Ω–æ model_id: {received_model_id}")
        logger.info(f"   –ü–µ—Ä–µ–¥–∞–Ω–æ r2_score: {received_score}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ XCom —Å–∏–º—É–ª—è—Ü—ñ—ó: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤")
    
    df = test_data_loading()
    if df is None:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ. –ü—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.")
        return
    
    df_prepared, encoder = test_feature_preparation(df)
    if df_prepared is None:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –æ–∑–Ω–∞–∫–∏. –ü—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.")
        return
    
    reg_model, reg_score = test_regression_model(df_prepared)
    
    clf_model, clf_score = test_classification_model(df_prepared)
    
    model_io_test = test_model_saving_loading()
    
    xcom_test = test_xcom_simulation()
    
    logger.info("\n" + "="*50)
    logger.info("üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    logger.info(f"   –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {'‚úÖ' if df is not None else '‚ùå'}")
    logger.info(f"   –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∑–Ω–∞–∫: {'‚úÖ' if df_prepared is not None else '‚ùå'}")
    logger.info(f"   –†–µ–≥—Ä–µ—Å—ñ—è (R¬≤={reg_score:.3f}): {'‚úÖ' if reg_model is not None else '‚ùå'}")
    logger.info(f"   –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è (Acc={clf_score:.3f}): {'‚úÖ' if clf_model is not None else '‚ùå'}")
    logger.info(f"   –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π: {'‚úÖ' if model_io_test else '‚ùå'}")
    logger.info(f"   XCom —Å–∏–º—É–ª—è—Ü—ñ—è: {'‚úÖ' if xcom_test else '‚ùå'}")
    
    success_count = sum([
        df is not None,
        df_prepared is not None,
        reg_model is not None,
        clf_model is not None,
        model_io_test,
        xcom_test
    ])
    
    logger.info(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/6 —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    
    if success_count == 6:
        logger.info("üéâ –í—Å—ñ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ Airflow!")
    else:
        logger.warning("‚ö†Ô∏è –î–µ—è–∫—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")

if __name__ == "__main__":
    main()
