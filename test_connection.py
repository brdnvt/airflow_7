"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
"""

import psycopg2
import pandas as pd
from sqlalchemy import create_engine
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_postgresql_connection():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL"""
    
    conn_params = {
        'host': 'localhost',
        'port': '5432',
        'database': 'airflow',
        'user': 'airflow',
        'password': 'airflow'
    }
    
    try:
        logger.info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL...")
        conn = psycopg2.connect(**conn_params)
        cursor = conn.cursor()
        
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        logger.info(f"PostgreSQL –≤–µ—Ä—Å—ñ—è: {version}")
        
        cursor.close()
        conn.close()
        logger.info("[–£–°–ü–Ü–•] –ë–∞–∑–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!")
        
        logger.info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ SQLAlchemy...")
        engine = create_engine(
            f"postgresql+psycopg2://{conn_params['user']}:{conn_params['password']}@{conn_params['host']}:{conn_params['port']}/{conn_params['database']}"
        )
        
        with engine.connect() as connection:
            result = connection.execute("SELECT 1 as test_column;")
            test_value = result.fetchone()[0]
            logger.info(f"–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –ø–æ–≤–µ—Ä–Ω—É–≤: {test_value}")
        
        logger.info("[–£–°–ü–Ü–•] SQLAlchemy –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!")
        
        logger.info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
        test_data = pd.DataFrame({
            'test_column': [1, 2, 3],
            'test_value': ['a', 'b', 'c']
        })
        
        test_data.to_sql('connection_test', engine, if_exists='replace', index=False)
        
        result_df = pd.read_sql('SELECT * FROM connection_test', engine)
        logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(result_df)} —Ä—è–¥–∫—ñ–≤")
        logger.info("[–£–°–ü–Ü–•] –¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ PostgreSQL —É—Å–ø—ñ—à–Ω–∏–π!")
        
        return True
        
    except Exception as e:
        logger.error(f"[–ü–û–ú–ò–õ–ö–ê] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ PostgreSQL: {str(e)}")
        return False

def test_airflow_metadata():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö Airflow"""
    try:
        logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å Airflow...")
        engine = create_engine("postgresql+psycopg2://airflow:airflow@localhost:5432/airflow")
        
        with engine.connect() as connection:
            tables_query = """
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name;
            """
            
            result = connection.execute(tables_query)
            tables = [row[0] for row in result.fetchall()]
            
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü—å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
            
            if 'dag_run' in tables:
                dag_runs_query = "SELECT COUNT(*) FROM dag_run;"
                result = connection.execute(dag_runs_query)
                dag_count = result.fetchone()[0]
                logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {dag_count} –∑–∞–ø—É—Å–∫—ñ–≤ DAG")
            
            logger.info("[–£–°–ü–Ü–•] –î–æ—Å—Ç—É–ø –¥–æ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö Airflow —É—Å–ø—ñ—à–Ω–∏–π!")
            
        return True
        
    except Exception as e:
        logger.error(f"[–ü–û–ú–ò–õ–ö–ê] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ Airflow: {str(e)}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
    
    success_count = 0
    total_tests = 2
    
    if test_postgresql_connection():
        success_count += 1
    
    if test_airflow_metadata():
        success_count += 1
    
    logger.info("="*50)
    logger.info(f"üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    logger.info(f"   –£—Å–ø—ñ—à–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤: {success_count}/{total_tests}")
    
    if success_count == total_tests:
        logger.info("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        logger.info("‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
